name: CICD
env:
  # repo_name: ${{ github.event.repository.name }}
  repo_name: cuda_resize

on:
  pull_request:
  push:
    branches:
      - master
      - development
      - "feature/**"

jobs:
  commit_filter:
    name: Filter Commit
    runs-on: ubuntu-latest
    if: "contains(github.ref, 'master') || !contains(github.event.head_commit.message, 'skip ci')"
    steps:
      - name: Echo the greeting
        run: echo 'CI/CD triggered.'
  check_code:
    name: Code Checking
    runs-on: ubuntu-latest
    if: github.event_name != 'push'
    needs: [commit_filter]
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.CICD_CREDENTIALS }}
      - name: Setup Docker build kit
        uses: docker/setup-buildx-action@v2
        with:
          version: latest
      - name: Build and test image
        id: build_image
        run: |
          # Build, test a docker container
          docker buildx build --load --tag linting_machine .
          docker run -t --rm --entrypoint bash linting_machine -c "pip install pylint==2.13.0 && pylint --rcfile=lintrc/pylintrc *.py"
  build_image:
    name: Build & Push Container - Docker Hub
    needs: [commit_filter]
    if: github.event_name == 'push' && (contains(github.ref, 'master') || contains(github.ref, 'development') || contains(github.ref, 'feature'))
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          submodules: true
          token: ${{ secrets.CICD_CREDENTIALS }}


      # - name: Build the image (AMD64, ARM64)
      #   run: |
      #     docker buildx create --use --name multi-arch-builder && \
      #     docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} && \
      #     docker buildx build --push \
      #       --tag ${{ secrets.DOCKER_USERNAME }}/${{ env.repo_name }} \
      #       --platform linux/amd64,linux/arm64 .

      - name: Build the image (AMD64)
        run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }} && \
          docker buildx build --push \
            --cache-to ${{ secrets.DOCKER_USERNAME }}/${{ env.repo_name }}:build_cache \
            --cache-from ${{ secrets.DOCKER_USERNAME }}/${{ env.repo_name }}:build_cache \
            --tag ${{ secrets.DOCKER_USERNAME }}/${{ env.repo_name }} .


      # - name: Docker Hub Description
      #   uses: peter-evans/dockerhub-description@v3
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      #     repository: ${{ secrets.DOCKER_USERNAME }}/${{ env.repo_name }}
      #     readme-filepath: ./README.md

      - if: success()
        name: Notify Deployment
        uses: rtCamp/action-slack-notify@master
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: ${{ github.repository	}}
          SLACK_ICON: https://github.com/royinx.png?size=48
          SLACK_TITLE: "New Version Deployed :rocket:"
          SLACK_MESSAGE: "Check out https://hub.docker.com/r/${{ secrets.DOCKER_USERNAME }}/${{ env.repo_name }}"

  auto_merge_pr:
    name: Auto Merge Sync Pull Request
    runs-on: ubuntu-latest
    # needs: [check_code]
    if: "contains(github.event.pull_request.title, 'chore: auto sync master with development')"
    steps:
      - name: Auto Review
        uses: andrewmusgrave/automatic-pull-request-review@0.0.2
        with:
          repo-token: "${{ secrets.CICD_CREDENTIALS }}"
          event: APPROVE
          body: "Auto Review by Ultron"
      - name: Auto Merge Sync PR
        uses: "pascalgn/automerge-action@4536e8847eb62fe2f0ee52c8fa92d17aa97f932f"
        env:
          GITHUB_TOKEN: "${{ secrets.CICD_CREDENTIALS }}"
          MERGE_LABELS: ""
          MERGE_METHOD: "merge"
